
#let a : 10
#let b : 90

let name : "Shinchan"

let name[0] : 10

#log "basic operation"

#log 1 + 2
#log 1/2
#log 1/1
#log 22%2

#log 4 - 9.5

#log "l" + 5
#log 5 % "l"
#log  "google" - "shinchan"
#findLetter function {string , target , index} : {

    # This is a muti-line statement function
    # This is a function which checks does the given string containes the target character in it or not.

    #if {index >= length{string}} : { # This is a if statement
    #    log "not found";
    #} 

    #elif {string[index] = target } : { # This is a elif statement
    #    log "found"
    #} 
    
    #else : {
    #    findLetter{string , target ,  index + 1};
    #}

#}



#let string : `it a mutable string.`
#string[0] : `I`
#string[2] : `!!!`
#log string , length{string}

#log type pop string[0]
#log string , length{string}

#findLetter{"Squig" , "q" , 0}

#let v :  pop google["test"]

#log v + "test"

#log google

#google[2] : "example"

#log google
#google["test"] : "asdkjnasd"
#log google

# let name : "harish"

#values[-1] : 10
#log values
#log pop values[1]
#log values

#log "Welcome back" , type name

#log google["c"]
#log google["a"]
#google["example1"] : "sdasdasdads"
#log google



#log type google[0] 

#let string : `tosting`

#string[1] : `e`

#log string

#log length{google}
#log length{google}

# log google
# linearSearch{google , "10"}
#log google[0]

#log "end of file" + "asdasd"
#let array : {1,2,3,4,5,6} # Since the array values cannot be changed at runtime , need to redesign it's logic

#array[0] : 100

# example[2] : "1234567890"

#let array : {1,2,3,4,45} #Collections are immutable , need to change the implementation logic.
#array[2] : 200
#log array
# Array
# List
# Map
# Stack and Queue
